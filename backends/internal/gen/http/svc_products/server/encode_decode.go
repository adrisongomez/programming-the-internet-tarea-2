// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-products HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"

	svcproducts "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_products"
	svcproductsviews "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_products/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListProductResponse returns an encoder for responses returned by the
// svc-products listProduct endpoint.
func EncodeListProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*svcproductsviews.ProductsList)
		enc := encoder(ctx, w)
		body := NewListProductResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListProductRequest returns a decoder for requests sent to the
// svc-products listProduct endpoint.
func DecodeListProductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			pageSize int
			after    *int
			err      error
		)
		qp := r.URL.Query()
		{
			pageSizeRaw := qp.Get("pageSize")
			if pageSizeRaw == "" {
				pageSize = 10
			} else {
				v, err2 := strconv.ParseInt(pageSizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("pageSize", pageSizeRaw, "integer"))
				}
				pageSize = int(v)
			}
		}
		if pageSize < 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", pageSize, 10, true))
		}
		if pageSize > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("pageSize", pageSize, 100, false))
		}
		{
			afterRaw := qp.Get("after")
			if afterRaw != "" {
				v, err2 := strconv.ParseInt(afterRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("after", afterRaw, "integer"))
				}
				pv := int(v)
				after = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListProductPayload(pageSize, after)

		return payload, nil
	}
}

// EncodeListProductError returns an encoder for errors returned by the
// listProduct svc-products endpoint.
func EncodeListProductError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "BadRequest":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListProductBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetProductByIDResponse returns an encoder for responses returned by
// the svc-products getProductById endpoint.
func EncodeGetProductByIDResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*svcproductsviews.Product)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewGetProductByIDResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetProductByIDRequest returns a decoder for requests sent to the
// svc-products getProductById endpoint.
func DecodeGetProductByIDRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			productID int
			err       error

			params = mux.Vars(r)
		)
		{
			productIDRaw := params["productId"]
			v, err2 := strconv.ParseInt(productIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("productId", productIDRaw, "integer"))
			}
			productID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetProductByIDPayload(productID)

		return payload, nil
	}
}

// EncodeGetProductByIDError returns an encoder for errors returned by the
// getProductById svc-products endpoint.
func EncodeGetProductByIDError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetProductByIDNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateProductResponse returns an encoder for responses returned by the
// svc-products createProduct endpoint.
func EncodeCreateProductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*svcproductsviews.Product)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewCreateProductResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateProductRequest returns a decoder for requests sent to the
// svc-products createProduct endpoint.
func DecodeCreateProductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateProductRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateProductRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateProductProductInput(&body)

		return payload, nil
	}
}

// EncodeCreateProductError returns an encoder for errors returned by the
// createProduct svc-products endpoint.
func EncodeCreateProductError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "Conflict":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCreateProductConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateProductByIDResponse returns an encoder for responses returned by
// the svc-products updateProductById endpoint.
func EncodeUpdateProductByIDResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*svcproductsviews.Product)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewUpdateProductByIDResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateProductByIDRequest returns a decoder for requests sent to the
// svc-products updateProductById endpoint.
func DecodeUpdateProductByIDRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateProductByIDRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				err = nil
			} else {
				var gerr *goa.ServiceError
				if errors.As(err, &gerr) {
					return nil, gerr
				}
				return nil, goa.DecodePayloadError(err.Error())
			}
		}
		err = ValidateUpdateProductByIDRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			productID int

			params = mux.Vars(r)
		)
		{
			productIDRaw := params["productId"]
			v, err2 := strconv.ParseInt(productIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("productId", productIDRaw, "integer"))
			}
			productID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateProductByIDPayload(&body, productID)

		return payload, nil
	}
}

// EncodeUpdateProductByIDError returns an encoder for errors returned by the
// updateProductById svc-products endpoint.
func EncodeUpdateProductByIDError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "Conflict":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateProductByIDConflictResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteProductByIDResponse returns an encoder for responses returned by
// the svc-products deleteProductById endpoint.
func EncodeDeleteProductByIDResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(bool)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteProductByIDRequest returns a decoder for requests sent to the
// svc-products deleteProductById endpoint.
func DecodeDeleteProductByIDRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			productID int
			err       error

			params = mux.Vars(r)
		)
		{
			productIDRaw := params["productId"]
			v, err2 := strconv.ParseInt(productIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("productId", productIDRaw, "integer"))
			}
			productID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteProductByIDPayload(productID)

		return payload, nil
	}
}

// EncodeDeleteProductByIDError returns an encoder for errors returned by the
// deleteProductById svc-products endpoint.
func EncodeDeleteProductByIDError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteProductByIDNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalSvcproductsviewsProductViewToProductResponseBody builds a value of
// type *ProductResponseBody from a value of type *svcproductsviews.ProductView.
func marshalSvcproductsviewsProductViewToProductResponseBody(v *svcproductsviews.ProductView) *ProductResponseBody {
	if v == nil {
		return nil
	}
	res := &ProductResponseBody{
		ID:          *v.ID,
		Title:       *v.Title,
		Description: *v.Description,
		Handle:      *v.Handle,
		Status:      string(*v.Status),
	}
	if v.Vendor != nil {
		res.Vendor = marshalSvcproductsviewsVendorViewToVendorResponseBody(v.Vendor)
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}
	if v.Variants != nil {
		res.Variants = make([]*ProductVariantResponseBody, len(v.Variants))
		for i, val := range v.Variants {
			res.Variants[i] = marshalSvcproductsviewsProductVariantViewToProductVariantResponseBody(val)
		}
	}
	if v.Medias != nil {
		res.Medias = make([]*ProductMediaResponseBody, len(v.Medias))
		for i, val := range v.Medias {
			res.Medias[i] = marshalSvcproductsviewsProductMediaViewToProductMediaResponseBody(val)
		}
	}

	return res
}

// marshalSvcproductsviewsVendorViewToVendorResponseBody builds a value of type
// *VendorResponseBody from a value of type *svcproductsviews.VendorView.
func marshalSvcproductsviewsVendorViewToVendorResponseBody(v *svcproductsviews.VendorView) *VendorResponseBody {
	if v == nil {
		return nil
	}
	res := &VendorResponseBody{
		ID:   v.ID,
		Name: *v.Name,
	}

	return res
}

// marshalSvcproductsviewsProductVariantViewToProductVariantResponseBody builds
// a value of type *ProductVariantResponseBody from a value of type
// *svcproductsviews.ProductVariantView.
func marshalSvcproductsviewsProductVariantViewToProductVariantResponseBody(v *svcproductsviews.ProductVariantView) *ProductVariantResponseBody {
	if v == nil {
		return nil
	}
	res := &ProductVariantResponseBody{
		ID:             v.ID,
		ColorName:      v.ColorName,
		ColorHex:       v.ColorHex,
		Price:          v.Price,
		ProductID:      v.ProductID,
		FeatureMediaID: v.FeatureMediaID,
	}

	return res
}

// marshalSvcproductsviewsProductMediaViewToProductMediaResponseBody builds a
// value of type *ProductMediaResponseBody from a value of type
// *svcproductsviews.ProductMediaView.
func marshalSvcproductsviewsProductMediaViewToProductMediaResponseBody(v *svcproductsviews.ProductMediaView) *ProductMediaResponseBody {
	if v == nil {
		return nil
	}
	res := &ProductMediaResponseBody{
		ID:        v.ID,
		URL:       v.URL,
		MediaType: v.MediaType,
	}

	return res
}

// marshalSvcproductsviewsPageInfoViewToPageInfoResponseBody builds a value of
// type *PageInfoResponseBody from a value of type
// *svcproductsviews.PageInfoView.
func marshalSvcproductsviewsPageInfoViewToPageInfoResponseBody(v *svcproductsviews.PageInfoView) *PageInfoResponseBody {
	if v == nil {
		return nil
	}
	res := &PageInfoResponseBody{
		StartCursor:   *v.StartCursor,
		EndCursor:     *v.EndCursor,
		HasMore:       *v.HasMore,
		TotalResource: *v.TotalResource,
	}

	return res
}

// unmarshalProductVariantInputRequestBodyToSvcproductsProductVariantInput
// builds a value of type *svcproducts.ProductVariantInput from a value of type
// *ProductVariantInputRequestBody.
func unmarshalProductVariantInputRequestBodyToSvcproductsProductVariantInput(v *ProductVariantInputRequestBody) *svcproducts.ProductVariantInput {
	if v == nil {
		return nil
	}
	res := &svcproducts.ProductVariantInput{
		ColorName: *v.ColorName,
		ColorHex:  v.ColorHex,
		Price:     *v.Price,
	}

	return res
}

// unmarshalProductMediaInputRequestBodyToSvcproductsProductMediaInput builds a
// value of type *svcproducts.ProductMediaInput from a value of type
// *ProductMediaInputRequestBody.
func unmarshalProductMediaInputRequestBodyToSvcproductsProductMediaInput(v *ProductMediaInputRequestBody) *svcproducts.ProductMediaInput {
	if v == nil {
		return nil
	}
	res := &svcproducts.ProductMediaInput{
		MediaID:    *v.MediaID,
		SortNumber: *v.SortNumber,
		Alt:        v.Alt,
	}

	return res
}

// unmarshalProductVariantInputRequestBodyRequestBodyToSvcproductsProductVariantInput
// builds a value of type *svcproducts.ProductVariantInput from a value of type
// *ProductVariantInputRequestBodyRequestBody.
func unmarshalProductVariantInputRequestBodyRequestBodyToSvcproductsProductVariantInput(v *ProductVariantInputRequestBodyRequestBody) *svcproducts.ProductVariantInput {
	if v == nil {
		return nil
	}
	res := &svcproducts.ProductVariantInput{
		ColorName: *v.ColorName,
		ColorHex:  v.ColorHex,
		Price:     *v.Price,
	}

	return res
}

// unmarshalProductMediaInputRequestBodyRequestBodyToSvcproductsProductMediaInput
// builds a value of type *svcproducts.ProductMediaInput from a value of type
// *ProductMediaInputRequestBodyRequestBody.
func unmarshalProductMediaInputRequestBodyRequestBodyToSvcproductsProductMediaInput(v *ProductMediaInputRequestBodyRequestBody) *svcproducts.ProductMediaInput {
	if v == nil {
		return nil
	}
	res := &svcproducts.ProductMediaInput{
		MediaID:    *v.MediaID,
		SortNumber: *v.SortNumber,
		Alt:        v.Alt,
	}

	return res
}
