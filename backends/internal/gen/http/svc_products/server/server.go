// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-products HTTP server
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package server

import (
	"context"
	"net/http"

	svcproducts "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_products"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the svc-products service endpoint HTTP handlers.
type Server struct {
	Mounts            []*MountPoint
	ListProduct       http.Handler
	GetProductByID    http.Handler
	CreateProduct     http.Handler
	UpdateProductByID http.Handler
	DeleteProductByID http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the svc-products service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *svcproducts.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListProduct", "GET", "/api/products"},
			{"GetProductByID", "GET", "/api/products/{productId}"},
			{"CreateProduct", "POST", "/api/products"},
			{"UpdateProductByID", "PUT", "/api/products/{productId}"},
			{"DeleteProductByID", "PUT", "/api/products/{productId}"},
		},
		ListProduct:       NewListProductHandler(e.ListProduct, mux, decoder, encoder, errhandler, formatter),
		GetProductByID:    NewGetProductByIDHandler(e.GetProductByID, mux, decoder, encoder, errhandler, formatter),
		CreateProduct:     NewCreateProductHandler(e.CreateProduct, mux, decoder, encoder, errhandler, formatter),
		UpdateProductByID: NewUpdateProductByIDHandler(e.UpdateProductByID, mux, decoder, encoder, errhandler, formatter),
		DeleteProductByID: NewDeleteProductByIDHandler(e.DeleteProductByID, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "svc-products" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListProduct = m(s.ListProduct)
	s.GetProductByID = m(s.GetProductByID)
	s.CreateProduct = m(s.CreateProduct)
	s.UpdateProductByID = m(s.UpdateProductByID)
	s.DeleteProductByID = m(s.DeleteProductByID)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return svcproducts.MethodNames[:] }

// Mount configures the mux to serve the svc-products endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListProductHandler(mux, h.ListProduct)
	MountGetProductByIDHandler(mux, h.GetProductByID)
	MountCreateProductHandler(mux, h.CreateProduct)
	MountUpdateProductByIDHandler(mux, h.UpdateProductByID)
	MountDeleteProductByIDHandler(mux, h.DeleteProductByID)
}

// Mount configures the mux to serve the svc-products endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListProductHandler configures the mux to serve the "svc-products"
// service "listProduct" endpoint.
func MountListProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/products", f)
}

// NewListProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "svc-products" service "listProduct" endpoint.
func NewListProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListProductRequest(mux, decoder)
		encodeResponse = EncodeListProductResponse(encoder)
		encodeError    = EncodeListProductError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "svc-products")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetProductByIDHandler configures the mux to serve the "svc-products"
// service "getProductById" endpoint.
func MountGetProductByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/products/{productId}", f)
}

// NewGetProductByIDHandler creates a HTTP handler which loads the HTTP request
// and calls the "svc-products" service "getProductById" endpoint.
func NewGetProductByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetProductByIDRequest(mux, decoder)
		encodeResponse = EncodeGetProductByIDResponse(encoder)
		encodeError    = EncodeGetProductByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getProductById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "svc-products")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateProductHandler configures the mux to serve the "svc-products"
// service "createProduct" endpoint.
func MountCreateProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/products", f)
}

// NewCreateProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "svc-products" service "createProduct" endpoint.
func NewCreateProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateProductRequest(mux, decoder)
		encodeResponse = EncodeCreateProductResponse(encoder)
		encodeError    = EncodeCreateProductError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "svc-products")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateProductByIDHandler configures the mux to serve the "svc-products"
// service "updateProductById" endpoint.
func MountUpdateProductByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/products/{productId}", f)
}

// NewUpdateProductByIDHandler creates a HTTP handler which loads the HTTP
// request and calls the "svc-products" service "updateProductById" endpoint.
func NewUpdateProductByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateProductByIDRequest(mux, decoder)
		encodeResponse = EncodeUpdateProductByIDResponse(encoder)
		encodeError    = EncodeUpdateProductByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateProductById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "svc-products")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteProductByIDHandler configures the mux to serve the "svc-products"
// service "deleteProductById" endpoint.
func MountDeleteProductByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/api/products/{productId}", f)
}

// NewDeleteProductByIDHandler creates a HTTP handler which loads the HTTP
// request and calls the "svc-products" service "deleteProductById" endpoint.
func NewDeleteProductByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteProductByIDRequest(mux, decoder)
		encodeResponse = EncodeDeleteProductByIDResponse(encoder)
		encodeError    = EncodeDeleteProductByIDError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteProductById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "svc-products")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
