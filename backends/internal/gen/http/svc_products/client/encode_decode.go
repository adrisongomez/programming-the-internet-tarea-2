// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-products HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	svcproducts "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_products"
	svcproductsviews "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/svc_products/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListProductRequest instantiates a HTTP request object with method and
// path set to call the "svc-products" service "listProduct" endpoint
func (c *Client) BuildListProductRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListProductSvcProductsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("svc-products", "listProduct", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListProductRequest returns an encoder for requests sent to the
// svc-products listProduct server.
func EncodeListProductRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*svcproducts.ListProductPayload)
		if !ok {
			return goahttp.ErrInvalidType("svc-products", "listProduct", "*svcproducts.ListProductPayload", v)
		}
		values := req.URL.Query()
		values.Add("pageSize", fmt.Sprintf("%v", p.PageSize))
		if p.After != nil {
			values.Add("after", fmt.Sprintf("%v", *p.After))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListProductResponse returns a decoder for responses returned by the
// svc-products listProduct endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeListProductResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeListProductResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListProductResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-products", "listProduct", err)
			}
			p := NewListProductProductsListOK(&body)
			view := "default"
			vres := &svcproductsviews.ProductsList{Projected: p, View: view}
			if err = svcproductsviews.ValidateProductsList(vres); err != nil {
				return nil, goahttp.ErrValidationError("svc-products", "listProduct", err)
			}
			res := svcproducts.NewProductsList(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListProductBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-products", "listProduct", err)
			}
			err = ValidateListProductBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("svc-products", "listProduct", err)
			}
			return nil, NewListProductBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("svc-products", "listProduct", resp.StatusCode, string(body))
		}
	}
}

// BuildGetProductByIDRequest instantiates a HTTP request object with method
// and path set to call the "svc-products" service "getProductById" endpoint
func (c *Client) BuildGetProductByIDRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		productID int
	)
	{
		p, ok := v.(*svcproducts.GetProductByIDPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("svc-products", "getProductById", "*svcproducts.GetProductByIDPayload", v)
		}
		productID = p.ProductID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetProductByIDSvcProductsPath(productID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("svc-products", "getProductById", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetProductByIDResponse returns a decoder for responses returned by the
// svc-products getProductById endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetProductByIDResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeGetProductByIDResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetProductByIDResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-products", "getProductById", err)
			}
			p := NewGetProductByIDProductOK(&body)
			view := "default"
			vres := &svcproductsviews.Product{Projected: p, View: view}
			if err = svcproductsviews.ValidateProduct(vres); err != nil {
				return nil, goahttp.ErrValidationError("svc-products", "getProductById", err)
			}
			res := svcproducts.NewProduct(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetProductByIDNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-products", "getProductById", err)
			}
			err = ValidateGetProductByIDNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("svc-products", "getProductById", err)
			}
			return nil, NewGetProductByIDNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("svc-products", "getProductById", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateProductRequest instantiates a HTTP request object with method and
// path set to call the "svc-products" service "createProduct" endpoint
func (c *Client) BuildCreateProductRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateProductSvcProductsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("svc-products", "createProduct", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateProductRequest returns an encoder for requests sent to the
// svc-products createProduct server.
func EncodeCreateProductRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*svcproducts.ProductInput)
		if !ok {
			return goahttp.ErrInvalidType("svc-products", "createProduct", "*svcproducts.ProductInput", v)
		}
		body := NewCreateProductRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("svc-products", "createProduct", err)
		}
		return nil
	}
}

// DecodeCreateProductResponse returns a decoder for responses returned by the
// svc-products createProduct endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateProductResponse may return the following errors:
//   - "Conflict" (type *goa.ServiceError): http.StatusConflict
//   - error: internal error
func DecodeCreateProductResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateProductResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-products", "createProduct", err)
			}
			p := NewCreateProductProductCreated(&body)
			view := "default"
			vres := &svcproductsviews.Product{Projected: p, View: view}
			if err = svcproductsviews.ValidateProduct(vres); err != nil {
				return nil, goahttp.ErrValidationError("svc-products", "createProduct", err)
			}
			res := svcproducts.NewProduct(vres)
			return res, nil
		case http.StatusConflict:
			var (
				body CreateProductConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("svc-products", "createProduct", err)
			}
			err = ValidateCreateProductConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("svc-products", "createProduct", err)
			}
			return nil, NewCreateProductConflict(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("svc-products", "createProduct", resp.StatusCode, string(body))
		}
	}
}

// unmarshalProductResponseBodyToSvcproductsviewsProductView builds a value of
// type *svcproductsviews.ProductView from a value of type *ProductResponseBody.
func unmarshalProductResponseBodyToSvcproductsviewsProductView(v *ProductResponseBody) *svcproductsviews.ProductView {
	if v == nil {
		return nil
	}
	res := &svcproductsviews.ProductView{
		ID:          v.ID,
		Title:       v.Title,
		Description: v.Description,
		Handle:      v.Handle,
	}
	status := svcproductsviews.ProductStatusView(*v.Status)
	res.Status = &status
	if v.Vendor != nil {
		res.Vendor = unmarshalVendorResponseBodyToSvcproductsviewsVendorView(v.Vendor)
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}
	if v.Variants != nil {
		res.Variants = make([]*svcproductsviews.ProductVariantView, len(v.Variants))
		for i, val := range v.Variants {
			res.Variants[i] = unmarshalProductVariantResponseBodyToSvcproductsviewsProductVariantView(val)
		}
	}
	if v.Medias != nil {
		res.Medias = make([]*svcproductsviews.ProductMediaView, len(v.Medias))
		for i, val := range v.Medias {
			res.Medias[i] = unmarshalProductMediaResponseBodyToSvcproductsviewsProductMediaView(val)
		}
	}

	return res
}

// unmarshalVendorResponseBodyToSvcproductsviewsVendorView builds a value of
// type *svcproductsviews.VendorView from a value of type *VendorResponseBody.
func unmarshalVendorResponseBodyToSvcproductsviewsVendorView(v *VendorResponseBody) *svcproductsviews.VendorView {
	if v == nil {
		return nil
	}
	res := &svcproductsviews.VendorView{
		Name: v.Name,
	}

	return res
}

// unmarshalProductVariantResponseBodyToSvcproductsviewsProductVariantView
// builds a value of type *svcproductsviews.ProductVariantView from a value of
// type *ProductVariantResponseBody.
func unmarshalProductVariantResponseBodyToSvcproductsviewsProductVariantView(v *ProductVariantResponseBody) *svcproductsviews.ProductVariantView {
	if v == nil {
		return nil
	}
	res := &svcproductsviews.ProductVariantView{
		ID:             v.ID,
		ColorName:      v.ColorName,
		ColorHex:       v.ColorHex,
		Price:          v.Price,
		ProductID:      v.ProductID,
		FeatureMediaID: v.FeatureMediaID,
	}

	return res
}

// unmarshalProductMediaResponseBodyToSvcproductsviewsProductMediaView builds a
// value of type *svcproductsviews.ProductMediaView from a value of type
// *ProductMediaResponseBody.
func unmarshalProductMediaResponseBodyToSvcproductsviewsProductMediaView(v *ProductMediaResponseBody) *svcproductsviews.ProductMediaView {
	if v == nil {
		return nil
	}
	res := &svcproductsviews.ProductMediaView{
		ID:        v.ID,
		URL:       v.URL,
		MediaType: v.MediaType,
	}

	return res
}

// unmarshalPageInfoResponseBodyToSvcproductsviewsPageInfoView builds a value
// of type *svcproductsviews.PageInfoView from a value of type
// *PageInfoResponseBody.
func unmarshalPageInfoResponseBodyToSvcproductsviewsPageInfoView(v *PageInfoResponseBody) *svcproductsviews.PageInfoView {
	if v == nil {
		return nil
	}
	res := &svcproductsviews.PageInfoView{
		StartCursor:   v.StartCursor,
		EndCursor:     v.EndCursor,
		HasMore:       v.HasMore,
		TotalResource: v.TotalResource,
	}

	return res
}

// marshalSvcproductsProductVariantInputToProductVariantInputRequestBody builds
// a value of type *ProductVariantInputRequestBody from a value of type
// *svcproducts.ProductVariantInput.
func marshalSvcproductsProductVariantInputToProductVariantInputRequestBody(v *svcproducts.ProductVariantInput) *ProductVariantInputRequestBody {
	if v == nil {
		return nil
	}
	res := &ProductVariantInputRequestBody{
		ColorName: v.ColorName,
		ColorHex:  v.ColorHex,
		Price:     v.Price,
	}

	return res
}

// marshalSvcproductsProductMediaInputToProductMediaInputRequestBody builds a
// value of type *ProductMediaInputRequestBody from a value of type
// *svcproducts.ProductMediaInput.
func marshalSvcproductsProductMediaInputToProductMediaInputRequestBody(v *svcproducts.ProductMediaInput) *ProductMediaInputRequestBody {
	if v == nil {
		return nil
	}
	res := &ProductMediaInputRequestBody{
		MediaID:    v.MediaID,
		SortNumber: v.SortNumber,
		Alt:        v.Alt,
	}

	return res
}

// marshalProductVariantInputRequestBodyToSvcproductsProductVariantInput builds
// a value of type *svcproducts.ProductVariantInput from a value of type
// *ProductVariantInputRequestBody.
func marshalProductVariantInputRequestBodyToSvcproductsProductVariantInput(v *ProductVariantInputRequestBody) *svcproducts.ProductVariantInput {
	if v == nil {
		return nil
	}
	res := &svcproducts.ProductVariantInput{
		ColorName: v.ColorName,
		ColorHex:  v.ColorHex,
		Price:     v.Price,
	}

	return res
}

// marshalProductMediaInputRequestBodyToSvcproductsProductMediaInput builds a
// value of type *svcproducts.ProductMediaInput from a value of type
// *ProductMediaInputRequestBody.
func marshalProductMediaInputRequestBodyToSvcproductsProductMediaInput(v *ProductMediaInputRequestBody) *svcproducts.ProductMediaInput {
	if v == nil {
		return nil
	}
	res := &svcproducts.ProductMediaInput{
		MediaID:    v.MediaID,
		SortNumber: v.SortNumber,
		Alt:        v.Alt,
	}

	return res
}
