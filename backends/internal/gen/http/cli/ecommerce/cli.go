// Code generated by goa v3.20.0, DO NOT EDIT.
//
// ecommerce HTTP client CLI support package
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	svcproductsc "github.com/adrisongomez/pti-ecommerce-site/backends/internal/gen/http/svc_products/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `svc-products (list-product|get-product-by-id|create-product)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` svc-products list-product --page-size 44 --after 7841910540487710407` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		svcProductsFlags = flag.NewFlagSet("svc-products", flag.ContinueOnError)

		svcProductsListProductFlags        = flag.NewFlagSet("list-product", flag.ExitOnError)
		svcProductsListProductPageSizeFlag = svcProductsListProductFlags.String("page-size", "10", "")
		svcProductsListProductAfterFlag    = svcProductsListProductFlags.String("after", "", "")

		svcProductsGetProductByIDFlags         = flag.NewFlagSet("get-product-by-id", flag.ExitOnError)
		svcProductsGetProductByIDProductIDFlag = svcProductsGetProductByIDFlags.String("product-id", "REQUIRED", "Unique product identifier")

		svcProductsCreateProductFlags    = flag.NewFlagSet("create-product", flag.ExitOnError)
		svcProductsCreateProductBodyFlag = svcProductsCreateProductFlags.String("body", "REQUIRED", "")
	)
	svcProductsFlags.Usage = svcProductsUsage
	svcProductsListProductFlags.Usage = svcProductsListProductUsage
	svcProductsGetProductByIDFlags.Usage = svcProductsGetProductByIDUsage
	svcProductsCreateProductFlags.Usage = svcProductsCreateProductUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "svc-products":
			svcf = svcProductsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "svc-products":
			switch epn {
			case "list-product":
				epf = svcProductsListProductFlags

			case "get-product-by-id":
				epf = svcProductsGetProductByIDFlags

			case "create-product":
				epf = svcProductsCreateProductFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "svc-products":
			c := svcproductsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-product":
				endpoint = c.ListProduct()
				data, err = svcproductsc.BuildListProductPayload(*svcProductsListProductPageSizeFlag, *svcProductsListProductAfterFlag)
			case "get-product-by-id":
				endpoint = c.GetProductByID()
				data, err = svcproductsc.BuildGetProductByIDPayload(*svcProductsGetProductByIDProductIDFlag)
			case "create-product":
				endpoint = c.CreateProduct()
				data, err = svcproductsc.BuildCreateProductPayload(*svcProductsCreateProductBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// svcProductsUsage displays the usage of the svc-products command and its
// subcommands.
func svcProductsUsage() {
	fmt.Fprintf(os.Stderr, `The product service perform CRUD operation over the product resource
Usage:
    %[1]s [globalflags] svc-products COMMAND [flags]

COMMAND:
    list-product: List products
    get-product-by-id: Get a product by its id
    create-product: Create a new product

Additional help:
    %[1]s svc-products COMMAND --help
`, os.Args[0])
}
func svcProductsListProductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-products list-product -page-size INT -after INT

List products
    -page-size INT: 
    -after INT: 

Example:
    %[1]s svc-products list-product --page-size 44 --after 7841910540487710407
`, os.Args[0])
}

func svcProductsGetProductByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-products get-product-by-id -product-id INT

Get a product by its id
    -product-id INT: Unique product identifier

Example:
    %[1]s svc-products get-product-by-id --product-id 559691723942643548
`, os.Args[0])
}

func svcProductsCreateProductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] svc-products create-product -body JSON

Create a new product
    -body JSON: 

Example:
    %[1]s svc-products create-product --body '{
      "description": "Possimus voluptatem ad sunt.",
      "handle": "Doloribus tempora neque reprehenderit.",
      "medias": [
         {
            "alt": "Sed quis.",
            "mediaId": "Tenetur qui consequuntur.",
            "sortNumber": 2548002682993232380
         },
         {
            "alt": "Sed quis.",
            "mediaId": "Tenetur qui consequuntur.",
            "sortNumber": 2548002682993232380
         },
         {
            "alt": "Sed quis.",
            "mediaId": "Tenetur qui consequuntur.",
            "sortNumber": 2548002682993232380
         },
         {
            "alt": "Sed quis.",
            "mediaId": "Tenetur qui consequuntur.",
            "sortNumber": 2548002682993232380
         }
      ],
      "status": "DRAFT",
      "tags": [
         "Velit quas rerum voluptatem quas dolorem et.",
         "Esse nemo voluptatem est.",
         "Nam unde sapiente et inventore.",
         "Neque ut."
      ],
      "title": "In veniam necessitatibus consectetur enim numquam iste.",
      "variants": [
         {
            "colorHex": "Molestiae et soluta animi aliquam eaque.",
            "colorName": "Veritatis impedit sequi tenetur numquam ad.",
            "price": 9013296666552782995
         },
         {
            "colorHex": "Molestiae et soluta animi aliquam eaque.",
            "colorName": "Veritatis impedit sequi tenetur numquam ad.",
            "price": 9013296666552782995
         },
         {
            "colorHex": "Molestiae et soluta animi aliquam eaque.",
            "colorName": "Veritatis impedit sequi tenetur numquam ad.",
            "price": 9013296666552782995
         },
         {
            "colorHex": "Molestiae et soluta animi aliquam eaque.",
            "colorName": "Veritatis impedit sequi tenetur numquam ad.",
            "price": 9013296666552782995
         }
      ],
      "vendorId": "Recusandae in aliquid accusamus occaecati."
   }'
`, os.Args[0])
}
