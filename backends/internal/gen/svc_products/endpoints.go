// Code generated by goa v3.20.0, DO NOT EDIT.
//
// svc-products endpoints
//
// Command:
// $ goa gen github.com/adrisongomez/pti-ecommerce-site/backends/design -o
// ./internal

package svcproducts

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "svc-products" service endpoints.
type Endpoints struct {
	ListProduct    goa.Endpoint
	GetProductByID goa.Endpoint
	CreateProduct  goa.Endpoint
}

// NewEndpoints wraps the methods of the "svc-products" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListProduct:    NewListProductEndpoint(s),
		GetProductByID: NewGetProductByIDEndpoint(s),
		CreateProduct:  NewCreateProductEndpoint(s),
	}
}

// Use applies the given middleware to all the "svc-products" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListProduct = m(e.ListProduct)
	e.GetProductByID = m(e.GetProductByID)
	e.CreateProduct = m(e.CreateProduct)
}

// NewListProductEndpoint returns an endpoint function that calls the method
// "listProduct" of service "svc-products".
func NewListProductEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListProductPayload)
		res, err := s.ListProduct(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedProductsList(res, "default")
		return vres, nil
	}
}

// NewGetProductByIDEndpoint returns an endpoint function that calls the method
// "getProductById" of service "svc-products".
func NewGetProductByIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetProductByIDPayload)
		res, err := s.GetProductByID(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedProduct(res, "default")
		return vres, nil
	}
}

// NewCreateProductEndpoint returns an endpoint function that calls the method
// "createProduct" of service "svc-products".
func NewCreateProductEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ProductInput)
		res, err := s.CreateProduct(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedProduct(res, "default")
		return vres, nil
	}
}
